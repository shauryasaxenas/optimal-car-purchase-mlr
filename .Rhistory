gf_point(price ~ mileage | location, data = car_data) + gf_lm()
# Scatterplot of price vs mileage by location
gf_point(price ~ mileage | location, data = car_data) + gf_lm()
# Scatterplot of price vs mileage by location
gf_point(price ~ mileage | location, data = car_data) + gf_lm()
# Scatterplot of price vs mileage by location
gf_point(price ~ mileage | location, data = car_data) + gf_lm()
# Scatterplot of price vs mileage by location
gf_point(price ~ mileage | location, data = car_data) + gf_lm()
# Scatterplot of price vs mileage by location
#gf_point(price ~ mileage | location, data = car_data) + gf_lm()
# Summary statistics
summary_stats <- car_data %>%
group_by(location) %>%
summarize(
sample_size = n(),
mean_price = mean(price),
sd_price = sd(price),
mean_mileage = mean(mileage),
sd_mileage = sd(mileage)
)
# Scatterplot of price vs mileage by location
gf_point(price ~ mileage | location, data = car_data) + gf_lm()
# Scatterplot of price vs mileage by location
gf_point(price ~ mileage | location, data = car_data) + gf_lm()
# Scatterplot of price vs mileage by location
gf_point(price ~ mileage | location, data = car_data) + gf_lm()
# Scatterplot of price vs mileage by location
gf_point(price ~ mileage | location, data = car_data) + gf_lm()
# Scatterplot of price vs mileage by location
gf_point(price ~ mileage | location, data = car_data) + gf_lm()
# Scatterplot of price vs mileage by location using ggplot2 (alternative to gf_point)
ggplot(car_data, aes(x = mileage, y = price, color = location)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Scatterplot of Price vs Mileage by Location",
x = "Mileage",
y = "Price")
# clean-up R environment
rm(list = ls())
# Load Packages
library(mosaic)
library(ggformula)
library(tidyverse)
library(car)
library(tinytex)
library(GGally)
knitr::opts_chunk$set(echo = F)  #make it be a default to not include the code, only the output, when you knit this document
# suggestion for sourcing and wrangling data:
raw_data1          <- read_csv("/Users/shauryasaxena/Documents/math_324/324 HWs/MLRCarProject/COcars.csv")  # read in the first location data
raw_data1$location <- "Colorado"                  # add a variable 'location' to the first dataset
raw_data2          <- read_csv("/Users/shauryasaxena/Documents/math_324/324 HWs/MLRCarProject/CAcars.csv") # read in the second location's data
raw_data2$location <- "California"                  # add a variable 'location' to the CA dataset
car_data_raw <- rbind(raw_data1, raw_data2)        # combine the two datasets together by stacking the rows
car_data <- car_data_raw %>%
filter(mileage > 0) %>%
filter(price >0)                 # filter out observations that are listed for $0 or have 0 mileage.
car_data$age <- 2024 - car_data$year               # create a new variable called age that tells us how old each car is.
# Now you should write some code that filters the 0 price or 0 mileage observations
# Scatterplot of price vs mileage by location using ggplot2 (alternative to gf_point)
ggplot(car_data, aes(x = mileage, y = price, color = location)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Scatterplot of Price vs Mileage by Location",
x = "Mileage",
y = "Price")
# Summary statistics for both locations
summary_stats <- car_data %>%
group_by(location) %>%
summarize(
sample_size = n(),
mean_price = mean(price),
sd_price = sd(price),
mean_mileage = mean(mileage),
sd_mileage = sd(mileage)
)
summary_stats
# Model 1: Same slope, different intercepts
model1 <- lm(price ~ mileage + location, data = car_data)
summary(model1)
# Model 1: Same slope, different intercepts
model1 <- lm(price ~ mileage + location, data = car_data)
summary(model1)
# Model 2: Different slopes and intercepts
model2 <- lm(price ~ mileage * location, data = car_data)
summary(model2)
